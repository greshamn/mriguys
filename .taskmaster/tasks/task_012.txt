# Task ID: 12
# Title: Charts and Data Visualization
# Status: pending
# Dependencies: 1, 3
# Priority: medium
# Description: Implement responsive charts using Nivo with theme-aware styling for various dashboards.
# Details:
1. Create the following chart components:
   - Center Utilization (calendar heatmap)
   - Turnaround Time (line chart by center)
   - No-Show Rate (stacked bar chart by cause)
   - Funding Exposure (area chart over time)

2. Implement theme-aware styling using CSS variables
3. Ensure charts are responsive and accessible

Example Chart Implementation:
```tsx
// src/components/charts/TurnaroundTimeChart.tsx
import { ResponsiveLine } from '@nivo/line';
import { useTheme } from '@/hooks/useTheme';

interface TurnaroundTimeChartProps {
  data: Array<{
    id: string;
    data: Array<{
      x: string; // date
      y: number; // days
    }>;
  }>;
}

export function TurnaroundTimeChart({ data }: TurnaroundTimeChartProps) {
  const { isDark } = useTheme();
  
  return (
    <div className="h-80">
      <ResponsiveLine
        data={data}
        margin={{ top: 20, right: 110, bottom: 50, left: 60 }}
        xScale={{ type: 'point' }}
        yScale={{ 
          type: 'linear', 
          min: 'auto', 
          max: 'auto', 
          stacked: false, 
          reverse: false 
        }}
        axisTop={null}
        axisRight={null}
        axisBottom={{
          tickSize: 5,
          tickPadding: 5,
          tickRotation: 0,
          legend: 'Date',
          legendOffset: 36,
          legendPosition: 'middle'
        }}
        axisLeft={{
          tickSize: 5,
          tickPadding: 5,
          tickRotation: 0,
          legend: 'Turnaround Time (days)',
          legendOffset: -40,
          legendPosition: 'middle'
        }}
        colors={[
          'var(--chart-1)',
          'var(--chart-2)',
          'var(--chart-3)',
          'var(--chart-4)',
          'var(--chart-5)'
        ]}
        pointSize={10}
        pointColor={{ theme: 'background' }}
        pointBorderWidth={2}
        pointBorderColor={{ from: 'serieColor' }}
        pointLabelYOffset={-12}
        useMesh={true}
        legends={[{
          anchor: 'bottom-right',
          direction: 'column',
          justify: false,
          translateX: 100,
          translateY: 0,
          itemsSpacing: 0,
          itemDirection: 'left-to-right',
          itemWidth: 80,
          itemHeight: 20,
          itemOpacity: 0.75,
          symbolSize: 12,
          symbolShape: 'circle',
          symbolBorderColor: 'rgba(0, 0, 0, .5)',
          effects: [{
            on: 'hover',
            style: {
              itemBackground: 'rgba(0, 0, 0, .03)',
              itemOpacity: 1
            }
          }]
        }]}
        theme={{
          textColor: 'var(--foreground)',
          fontSize: 11,
          axis: {
            domain: {
              line: {
                stroke: 'var(--border)',
                strokeWidth: 1
              }
            },
            ticks: {
              line: {
                stroke: 'var(--border)',
                strokeWidth: 1
              }
            }
          },
          grid: {
            line: {
              stroke: isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',
              strokeWidth: 1
            }
          },
          tooltip: {
            container: {
              background: 'var(--background)',
              color: 'var(--foreground)',
              fontSize: 12,
              borderRadius: 'var(--radius)',
              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'
            }
          }
        }}
      />
    </div>
  );
}
```

# Test Strategy:
1. Test all charts in both light and dark modes
2. Verify that charts use the correct CSS variables for colors
3. Test responsive behavior on different screen sizes
4. Validate that tooltips display correctly
5. Test accessibility features (keyboard navigation, screen reader support)
6. Verify that charts update correctly when data changes
