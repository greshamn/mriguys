{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Project Scaffolding and Theme Setup",
        "description": "Initialize the project with Vite, React, Tailwind CSS, and shadcn/ui. Set up the theme variables and implement the Theme Switcher. Complete the routing structure with role-based guards and admin role switching functionality.",
        "status": "done",
        "dependencies": [],
        "priority": "high",
        "details": "Completed:\n1. Created a new Vite project with React and TypeScript\n2. Installed and configured Tailwind CSS v3\n3. Set up shadcn/ui components\n4. Created a themes folder with JSON theme snapshots\n5. Imported theme variables into CSS for light/dark modes\n6. Implemented Theme Switcher component with light/dark toggle\n7. Configured CSS variables in globals.css for all theme tokens\n\nRemaining:\n1. Set up comprehensive routing structure with React Router\n2. Create role-based route guards with dual-role context system\n3. Implement admin role switcher dropdown in TopMenu\n4. Maintain existing shadcn components with tweakcn CSS styles\n\nImplemented Theme Switcher:\n```tsx\n// src/components/ThemeSwitcher.tsx\nimport { useState, useEffect } from 'react';\nimport { Button } from './ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from './ui/dropdown-menu';\nimport { Sun, Moon } from 'lucide-react';\n\nconst themes = {\n  light: 'Light',\n  dark: 'Dark'\n};\n\nexport function ThemeSwitcher() {\n  const [theme, setTheme] = useState('light');\n  \n  useEffect(() => {\n    document.documentElement.setAttribute('data-theme', theme);\n    if (theme === 'dark') {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [theme]);\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"icon\">\n          {theme === 'light' ? <Sun /> : <Moon />}\n          <span className=\"sr-only\">Toggle theme</span>\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\">\n        {Object.entries(themes).map(([key, name]) => (\n          <DropdownMenuItem key={key} onClick={() => setTheme(key)}>\n            {name}\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n```",
        "testStrategy": "1. Verify that the project builds successfully with `pnpm dev`\n2. Test theme switching between light and dark modes\n3. Confirm that CSS variables are properly applied to components\n4. Validate that route guards correctly redirect based on role\n5. Test the dual-role context system (primary role + viewing role)\n6. Verify admin role switcher dropdown functionality in TopMenu\n7. Ensure responsive layout works on different screen sizes",
        "subtasks": [
          {
            "id": 1,
            "title": "Vite + React setup with TypeScript",
            "description": "",
            "status": "completed",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Tailwind CSS v3 configuration",
            "description": "",
            "status": "completed",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "shadcn/ui components installation",
            "description": "",
            "status": "completed",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Theme variables and CSS setup",
            "description": "",
            "status": "completed",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Light/Dark theme switcher implementation",
            "description": "",
            "status": "completed",
            "dependencies": [],
            "details": "",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "Set up comprehensive routing structure with React Router",
            "description": "Implement the complete routing structure for the application using React Router.",
            "status": "done",
            "dependencies": [],
            "details": "1. Install and configure React Router v6\n2. Create route definitions for all major sections\n3. Set up nested routes for complex sections\n4. Implement route parameters for dynamic pages\n5. Add 404 page and error boundaries",
            "testStrategy": "1. Test navigation between all routes\n2. Verify that URL parameters work correctly\n3. Test error handling for invalid routes\n4. Ensure history navigation works as expected"
          },
          {
            "id": 7,
            "title": "Create role-based route guards with dual-role context",
            "description": "Implement a dual-role context system with primary role and viewing role capabilities.",
            "status": "done",
            "dependencies": [
              6
            ],
            "details": "1. Create a RoleContext with primary role and viewing role states\n2. Implement ProtectedRoute component that checks permissions\n3. Set up route configuration with role requirements\n4. Create redirect logic for unauthorized access\n5. Implement role-based content rendering within components",
            "testStrategy": "1. Test access to routes with different roles\n2. Verify redirects for unauthorized access\n3. Test switching between primary and viewing roles\n4. Ensure content renders correctly based on active role"
          },
          {
            "id": 8,
            "title": "Implement admin role switcher dropdown in TopMenu",
            "description": "Create a dropdown in the TopMenu that allows admins to switch their viewing role.",
            "status": "done",
            "dependencies": [
              7
            ],
            "details": "1. Create RoleSwitcher component using shadcn/ui dropdown\n2. Connect to the dual-role context system\n3. Show available roles for switching\n4. Implement role switching logic\n5. Add visual indicator of current viewing role",
            "testStrategy": "1. Test role switching functionality\n2. Verify that UI updates correctly after role change\n3. Test that only admins can see the role switcher\n4. Ensure dropdown opens and closes properly"
          },
          {
            "id": 9,
            "title": "Maintain shadcn components with tweakcn CSS styles",
            "description": "Ensure all shadcn components work with the theme system and apply tweakcn CSS styles.",
            "status": "done",
            "dependencies": [
              4,
              5
            ],
            "details": "1. Review all shadcn components for theme compatibility\n2. Apply tweakcn CSS styles to enhance component appearance\n3. Ensure consistent styling across all components\n4. Test components in both light and dark modes\n<info added on 2025-08-21T10:28:14.146Z>\nTask 1.9 has been completed successfully. All shadcn components have been properly integrated with the tweakcn CSS theme system. The components display consistent styling across the application and function correctly in both light and dark modes. Theme-aware behavior has been implemented, ensuring proper CSS variable usage throughout the component library. User testing has verified the frontend appearance and confirmed that everything looks good.\n</info added on 2025-08-21T10:28:14.146Z>",
            "testStrategy": "1. Verify all components render correctly in both themes\n2. Test component interactions in different themes\n3. Ensure CSS variables are properly applied\n4. Check for any styling inconsistencies"
          }
        ]
      },
      {
        "id": 2,
        "title": "Layout Shell Implementation",
        "description": "Create the global layout shell with Left Sidebar, Top Bar, Right AI Drawer, Content area, and Sticky Action Bar components.",
        "details": "1. Create a main Layout component that wraps all pages\n2. Implement Left Sidebar with collapsible sections that change by role\n3. Build Top Bar with logo, global search, notifications bell, Theme Switch, and user menu\n4. Create Command-K modal for quick actions\n5. Implement Right AI Insights Drawer with toggle functionality\n6. Set up Content area with 12-column responsive grid\n7. Add Sticky Action Bar for primary CTAs\n8. Implement responsive behavior for all layout components\n\nExample layout structure:\n```tsx\n// src/components/Layout.tsx\nimport { useState } from 'react';\nimport { Outlet } from 'react-router-dom';\nimport { Sidebar } from './Sidebar';\nimport { TopBar } from './TopBar';\nimport { AIDrawer } from './AIDrawer';\nimport { ActionBar } from './ActionBar';\n\nexport function Layout() {\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n  const [aiDrawerOpen, setAIDrawerOpen] = useState(false);\n  \n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar collapsed={sidebarCollapsed} onToggle={() => setSidebarCollapsed(!sidebarCollapsed)} />\n      \n      <div className=\"flex flex-col flex-1 overflow-hidden\">\n        <TopBar onAIToggle={() => setAIDrawerOpen(!aiDrawerOpen)} />\n        \n        <div className=\"flex flex-1 overflow-hidden\">\n          <main className=\"flex-1 overflow-y-auto p-6\">\n            <div className=\"grid grid-cols-12 gap-6\">\n              <Outlet />\n            </div>\n          </main>\n          \n          {aiDrawerOpen && <AIDrawer />}\n        </div>\n        \n        <ActionBar />\n      </div>\n    </div>\n  );\n}\n```",
        "testStrategy": "1. Test responsive behavior on different screen sizes\n2. Verify that sidebar collapses and expands correctly\n3. Ensure AI Drawer toggles properly\n4. Test Command-K modal opens with keyboard shortcut\n5. Validate that all layout components render correctly in different themes\n6. Check accessibility for keyboard navigation and screen readers",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Main Layout Component Structure",
            "description": "Implement the base Layout component that will serve as the shell for all pages, including the basic structure for sidebar, topbar, content area, and action bar.",
            "dependencies": [],
            "details": "Create src/components/Layout.tsx with the basic structure shown in the example. Implement useState hooks for sidebar collapse and AI drawer toggle states. Use flex layout for the main container and ensure proper nesting of components. Set up the Outlet from react-router-dom to render page content.\n<info added on 2025-08-21T10:42:48.174Z>\nImplementation completed successfully with the following components and features:\n\n- Created Layout.jsx as the main shell component for all pages\n- Implemented AI Insights Drawer with role-specific content (patient tips, referrer suggestions, center optimization insights)\n- Added Sticky Action Bar with context-aware buttons that adapt based on current route and user role\n- Integrated 12-column grid system for enhanced content layout\n- Built Command-K Modal with keyboard navigation and role-specific quick actions\n- Updated Sidebar with role-specific navigation options as specified in the PRD\n- Ensured mobile responsiveness with overlay sidebar and adaptive design\n- Integrated with existing theme system using tweakcn CSS variables and shadcn components\n\nAll components are fully responsive and maintain design consistency across the application. The layout shell now provides the foundation for all subsequent page implementations.\n</info added on 2025-08-21T10:42:48.174Z>",
            "status": "done",
            "testStrategy": "Test that the Layout component renders without errors. Verify that the component structure matches the design requirements. Check that state hooks for sidebar and AI drawer work correctly."
          },
          {
            "id": 2,
            "title": "Implement Left Sidebar Component",
            "description": "Create a collapsible sidebar component with navigation sections that adapt based on user role.",
            "dependencies": [
              "2.1"
            ],
            "details": "Create src/components/Sidebar.tsx with collapsible functionality. Implement navigation sections with icons and labels. Add role-based conditional rendering for different menu items. Include toggle button for collapse/expand. Use CSS transitions for smooth collapse/expand animations. Implement active state styling for current route.\n<info added on 2025-08-21T10:54:10.305Z>\nTask 2.2 has been completed successfully with the following enhancements to the Sidebar component:\n\nThe sidebar now features a desktop collapse/expand toggle button with smooth width transitions between 16px (collapsed) and 64px (expanded) states. Navigation items highlight based on the current route using useLocation, and the collapsed state displays an icons-only view with tooltips for accessibility. \n\nAll navigation items have proper path handling and click handlers. The quick action button displays role-specific labels (New Referral, Upload Report, New Case, etc.). CSS transitions have been improved for width changes and mobile overlay animations.\n\nAccessibility has been enhanced with ARIA labels and tooltips for the collapsed state. The component maintains mobile overlay functionality while adding desktop collapse capability.\n\nKey additions include a desktop collapse toggle button with ChevronLeft/ChevronRight icons, collapsed state with icons-only view, route-aware active states, role-specific quick action labels, an expand button for collapsed state, tooltips for collapsed elements, and smooth width transitions.\n</info added on 2025-08-21T10:54:10.305Z>",
            "status": "done",
            "testStrategy": "Test sidebar collapse/expand functionality. Verify that navigation items render correctly based on user role. Check that active states are applied to the current route. Test keyboard navigation accessibility."
          },
          {
            "id": 3,
            "title": "Build Top Bar Component",
            "description": "Implement the top navigation bar with logo, global search, notifications, theme switcher, and user menu.",
            "dependencies": [
              "2.1"
            ],
            "details": "Create src/components/TopBar.tsx with fixed positioning. Add logo component on the left side. Implement global search input with search icon. Create notifications bell with badge for unread notifications. Add theme switcher toggle. Implement user menu dropdown with profile picture, name, and menu items (Profile, Settings, Logout).\n<info added on 2025-08-25T06:37:32.463Z>\nUpdate the subtask details to reflect the current implementation status:\n\nBased on the review of the current TopMenu implementation, the following elements have been completed:\n- Logo component on left side\n- Theme switcher toggle (Sun/Moon)\n- User menu (RoleSwitcher with role switching)\n- Command-K modal integration\n- Responsive design\n- Proper positioning and styling\n\nThe following elements still need to be implemented:\n- Global search input field (currently only have Command-K button)\n- Notifications bell with badge for unread notifications\n</info added on 2025-08-25T06:37:32.463Z>",
            "status": "done",
            "testStrategy": "Test that all top bar elements render correctly. Verify that the user menu dropdown opens and closes properly. Test theme switcher functionality. Ensure the component is responsive on different screen sizes."
          },
          {
            "id": 4,
            "title": "Create Command-K Modal for Quick Actions",
            "description": "Implement a keyboard-activated modal for quick navigation and actions throughout the application.",
            "dependencies": [
              "2.3"
            ],
            "details": "Create src/components/CommandModal.tsx using a dialog component. Implement keyboard listener for Command+K shortcut. Add search input with filtering functionality. Create categorized command groups (Navigation, Actions, Settings). Implement keyboard navigation within the modal. Add visual feedback for selected items. Include recent/frequent commands section.",
            "status": "done",
            "testStrategy": "Test that Command+K shortcut opens the modal. Verify that search filtering works correctly. Test keyboard navigation within the modal. Ensure the modal can be closed via Escape key or clicking outside."
          },
          {
            "id": 5,
            "title": "Implement Right AI Insights Drawer",
            "description": "Create a toggleable right-side drawer for AI insights and contextual suggestions.",
            "dependencies": [
              "2.1"
            ],
            "details": "Create src/components/AIDrawer.tsx with fixed positioning on the right side. Implement toggle functionality with smooth animations. Add header with title and close button. Create placeholder for AI insights content. Implement loading states for when suggestions are being generated. Add empty state for when no suggestions are available.",
            "status": "done",
            "testStrategy": "Test that the drawer opens and closes correctly. Verify that the drawer displays properly on different screen sizes. Test loading states and empty states. Ensure the drawer can be closed via the close button."
          },
          {
            "id": 6,
            "title": "Set Up Content Area with Responsive Grid",
            "description": "Implement the main content area with a 12-column responsive grid system for flexible layouts.",
            "dependencies": [
              "2.1"
            ],
            "details": "Enhance the main content area in Layout.tsx with a responsive grid system. Implement a 12-column grid using CSS Grid. Create utility classes for different column spans. Add responsive breakpoints for adapting layouts to different screen sizes. Implement proper padding and spacing for content. Ensure overflow handling for content that exceeds viewport height.\n<info added on 2025-08-25T06:42:41.877Z>\n✅ COMPLETED:\n- Enhanced 12-column responsive grid system in Layout.jsx\n- Responsive breakpoints: 1 column on mobile, 6 on tablet, 12 on desktop\n- Responsive padding: p-4 on mobile, p-6 on tablet, p-8 on desktop\n- Responsive gaps: gap-4 on mobile, gap-6 on tablet, gap-8 on desktop\n- Added max-w-7xl mx-auto for better content centering and max-width\n- Created comprehensive grid utility classes in index.css:\n  - Grid column spans (1-12) with responsive variants\n  - Grid row spans (1-6)\n  - Responsive gap utilities\n  - Media query breakpoints for sm (640px+) and lg (1024px+)\n\nThe content area now provides a flexible, responsive grid system that adapts to different screen sizes while maintaining proper spacing and overflow handling.\n</info added on 2025-08-25T06:42:41.877Z>",
            "status": "done",
            "testStrategy": "Test the grid system on different screen sizes. Verify that content flows correctly in the grid. Test overflow behavior with large content. Ensure proper spacing and alignment of grid items."
          },
          {
            "id": 7,
            "title": "Add Sticky Action Bar Component",
            "description": "Implement a sticky action bar at the bottom of the layout for primary call-to-action buttons.",
            "dependencies": [
              "2.1"
            ],
            "details": "Create src/components/ActionBar.tsx with fixed positioning at the bottom. Implement container for primary and secondary action buttons. Add shadow effect for depth. Ensure proper z-index to stay above content. Create context provider for dynamically updating action buttons based on current page. Implement responsive behavior for different screen sizes.\n<info added on 2025-08-25T06:44:08.174Z>\nEnhanced sticky positioning with responsive breakpoints (bottom-4 right-4 on mobile, bottom-6 right-6 on larger screens). Improved shadow effects: shadow-xl with hover:shadow-2xl for better depth perception. Enhanced backdrop blur and transparency effects for modern glass-morphism look. Role-specific shadow colors (shadow-primary/25 for primary buttons, shadow-black/10 for secondary). Responsive button labels (hidden on mobile, visible on sm+ screens for better mobile UX). Smooth transitions with ease-in-out timing (duration-300). Context-aware action buttons that adapt based on current route and user role. Proper z-index (z-50) to ensure the bar stays above all content. Enhanced visual feedback with improved hover states.\n</info added on 2025-08-25T06:44:08.174Z>",
            "status": "done",
            "testStrategy": "Test that the action bar remains sticky when scrolling. Verify that buttons render correctly. Test on different screen sizes to ensure responsive behavior. Check that the z-index properly keeps the bar above other content."
          },
          {
            "id": 8,
            "title": "Implement Responsive Behavior and Accessibility",
            "description": "Ensure all layout components are fully responsive and meet accessibility standards across different devices and screen sizes.",
            "dependencies": [
              "2.2",
              "2.3",
              "2.5",
              "2.6",
              "2.7"
            ],
            "details": "Implement media queries for all layout components to adapt to different screen sizes. Create mobile-specific behaviors (e.g., sidebar becomes a drawer on small screens). Add keyboard navigation support for all interactive elements. Implement proper ARIA attributes for accessibility. Ensure sufficient color contrast for all UI elements. Add focus indicators for keyboard navigation. Test and optimize for screen readers.\n<info added on 2025-08-25T06:45:33.485Z>\n✅ RESPONSIVE BEHAVIOR COMPLETED:\n- Mobile overlay sidebar (lg:hidden) with smooth transitions\n- Responsive grid system: 1 column (mobile) → 6 columns (tablet) → 12 columns (desktop)\n- Responsive padding: p-4 (mobile) → p-6 (tablet) → p-8 (desktop)\n- Responsive gaps: gap-4 (mobile) → gap-6 (tablet) → gap-8 (desktop)\n- Mobile-first design with progressive enhancement\n- Responsive button labels (hidden on mobile, visible on larger screens)\n- Responsive positioning for ActionBar (bottom-4 right-4 → bottom-6 right-6)\n\n✅ ACCESSIBILITY FEATURES COMPLETED:\n- ARIA labels for all interactive elements (aria-label, aria-describedby)\n- Keyboard navigation in CommandModal (Arrow keys, Enter, Escape)\n- Proper focus management and focus indicators\n- Screen reader friendly tooltips and labels\n- Semantic HTML structure with proper heading hierarchy\n- Role-based content adaptation for different user contexts\n- High contrast color schemes with proper foreground/background ratios\n- Focus-visible states for keyboard navigation\n- Proper z-index management for layering\n\nAll layout components are fully responsive and meet modern accessibility standards, providing an excellent user experience across all devices and assistive technologies.\n</info added on 2025-08-25T06:45:33.485Z>",
            "status": "done",
            "testStrategy": "Test all components on various screen sizes from mobile to desktop. Verify keyboard navigation works for all interactive elements. Test with screen readers to ensure proper accessibility. Check color contrast ratios meet WCAG standards. Verify that focus states are clearly visible."
          }
        ]
      },
      {
        "id": 3,
        "title": "Mock Data and MSW Setup",
        "description": "Create seed JSON data for all entities and implement MSW handlers for API endpoints to simulate backend interactions.",
        "details": "1. Create seed JSON files for all entities: centers, slots, referrals, appointments, reports, bills, liens, settlements, users, etc.\n2. Set up MSW (Mock Service Worker) for API simulation\n3. Implement handlers for all required endpoints: `/centers`, `/slots`, `/referrals`, `/appointments`, `/reports`, `/liens`\n4. Add simulated latency (300-700ms) for realism\n5. Create a Zustand store with selectors for state management\n6. Implement a demo webhooks simulator panel\n7. Add a script to reset seed data for demos\n\nExample MSW setup:\n```tsx\n// src/mocks/handlers.ts\nimport { rest } from 'msw';\nimport centerData from './data/centers.json';\nimport slotData from './data/slots.json';\nimport referralData from './data/referrals.json';\n\nexport const handlers = [\n  rest.get('/api/centers', (req, res, ctx) => {\n    // Add simulated latency\n    return res(\n      ctx.delay(300 + Math.random() * 400),\n      ctx.status(200),\n      ctx.json(centerData)\n    );\n  }),\n  \n  rest.get('/api/centers/:id/slots', (req, res, ctx) => {\n    const { id } = req.params;\n    const centerSlots = slotData.filter(slot => slot.centerId === id);\n    return res(\n      ctx.delay(300 + Math.random() * 400),\n      ctx.status(200),\n      ctx.json(centerSlots)\n    );\n  }),\n  \n  rest.post('/api/referrals', async (req, res, ctx) => {\n    const newReferral = await req.json();\n    // Add validation logic here\n    return res(\n      ctx.delay(300 + Math.random() * 400),\n      ctx.status(201),\n      ctx.json({ ...newReferral, id: Date.now().toString() })\n    );\n  }),\n  \n  // Add more handlers for other endpoints\n];\n```",
        "testStrategy": "1. Verify all MSW handlers return appropriate data\n2. Test error scenarios and edge cases\n3. Validate that the Zustand store correctly updates with mock data\n4. Ensure the reset script properly restores seed data\n5. Test webhook simulator functionality",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Patient and Referrer Dashboards",
        "description": "Implement the Patient and Referrer role-specific dashboards with KPIs, charts, and action cards.",
        "details": "1. Create Patient Dashboard with:\n   - Hero Card showing next appointment details\n   - Timeline component for Referral → Booking → Scan → Report Ready\n   - AI Tip card with contextual advice\n   - CTAs for \"View Results\" and \"Message Center\"\n\n2. Create Referrer Dashboard with:\n   - KPI cards for new results, upcoming scans, avg TAT, no-show rate\n   - Line chart for TAT (7/30 days)\n   - Bar chart for modalities\n   - Worklist table of patients with status and center\n   - AI Suggestions card for best center recommendations\n   - \"New Referral\" CTA button\n\n3. Implement responsive card layouts using the 12-column grid\n4. Add skeleton loaders for all dashboard components\n\nExample Patient Dashboard:\n```tsx\n// src/pages/PatientDashboard.tsx\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Timeline } from '@/components/Timeline';\nimport { AITip } from '@/components/AITip';\nimport { useStore } from '@/store';\n\nexport function PatientDashboard() {\n  const [loading, setLoading] = useState(true);\n  const { appointments, fetchAppointments } = useStore();\n  \n  useEffect(() => {\n    fetchAppointments().finally(() => setLoading(false));\n  }, [fetchAppointments]);\n  \n  const nextAppointment = appointments[0]; // Assuming sorted\n  \n  return (\n    <>\n      <div className=\"col-span-12\">\n        <h1 className=\"text-3xl font-bold mb-6\">Your Dashboard</h1>\n      </div>\n      \n      <div className=\"col-span-12 lg:col-span-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Your Next Appointment</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {loading ? (\n              <div className=\"h-24 animate-pulse bg-muted rounded\" />\n            ) : nextAppointment ? (\n              <div>\n                <h3 className=\"text-xl font-medium\">{new Date(nextAppointment.datetime).toLocaleDateString()}</h3>\n                <p>{nextAppointment.center.name}</p>\n                <div className=\"mt-4\">\n                  <h4 className=\"font-medium\">Preparation Checklist:</h4>\n                  <ul className=\"list-disc pl-5 mt-2\">\n                    <li>No metal objects</li>\n                    <li>Wear comfortable clothing</li>\n                    <li>Arrive 15 minutes early</li>\n                  </ul>\n                </div>\n                <Button className=\"mt-4\">Reschedule</Button>\n              </div>\n            ) : (\n              <p>No upcoming appointments</p>\n            )}\n          </CardContent>\n        </Card>\n        \n        <Card className=\"mt-6\">\n          <CardHeader>\n            <CardTitle>Your Care Timeline</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Timeline />\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"col-span-12 lg:col-span-4\">\n        <AITip tip=\"Arrive 15 min early; metal object checklist.\" />\n        \n        <div className=\"mt-6 flex flex-col gap-4\">\n          <Button size=\"lg\" className=\"w-full\">View Results</Button>\n          <Button size=\"lg\" variant=\"outline\" className=\"w-full\" disabled>\n            Message Center\n          </Button>\n        </div>\n      </div>\n    </>\n  );\n}\n```",
        "testStrategy": "1. Test both dashboards in all theme modes\n2. Verify responsive layout on different screen sizes\n3. Test loading states and skeleton loaders\n4. Validate that KPIs and charts display correct data\n5. Ensure CTAs trigger appropriate actions\n6. Test AI Tip/Suggestions display correctly",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Imaging Center Dashboard",
        "description": "Implement the Imaging Center role-specific dashboard with KPIs, calendar heatmap, and worklist functionality.",
        "details": "1. Create Imaging Center Dashboard with:\n   - KPI cards for today's scans, utilization %, no-shows, avg report lag\n   - Calendar heatmap for slot fill (12 weeks)\n   - Worklist table with check-in/complete/upload report actions\n   - AI Suggestions card for optimization recommendations\n\n2. Implement the calendar heatmap using Nivo\n3. Create worklist filters and actions\n4. Add skeleton loaders for all components\n\nExample Calendar Heatmap:\n```tsx\n// src/components/UtilizationHeatmap.tsx\nimport { ResponsiveHeatMap } from '@nivo/heatmap';\nimport { useTheme } from '@/hooks/useTheme';\n\ninterface UtilizationHeatmapProps {\n  data: Array<{\n    day: string;\n    slots: Array<{\n      hour: string;\n      value: number; // 0-1 representing utilization\n    }>;\n  }>;\n}\n\nexport function UtilizationHeatmap({ data }: UtilizationHeatmapProps) {\n  const { theme } = useTheme();\n  \n  // Map CSS variables to chart colors\n  const colors = [\n    'var(--chart-1)',\n    'var(--chart-2)',\n    'var(--chart-3)',\n    'var(--chart-4)',\n    'var(--chart-5)',\n  ];\n  \n  return (\n    <div className=\"h-80\">\n      <ResponsiveHeatMap\n        data={data}\n        keys={['8am', '9am', '10am', '11am', '12pm', '1pm', '2pm', '3pm', '4pm', '5pm']}\n        indexBy=\"day\"\n        margin={{ top: 20, right: 20, bottom: 60, left: 60 }}\n        colors={colors}\n        theme={{\n          textColor: 'var(--foreground)',\n          tooltip: {\n            container: {\n              background: 'var(--background)',\n              color: 'var(--foreground)',\n              fontSize: 12,\n            },\n          },\n        }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: -45,\n          legend: 'Hour',\n          legendPosition: 'middle',\n          legendOffset: 36,\n        }}\n        axisLeft={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'Day',\n          legendPosition: 'middle',\n          legendOffset: -40,\n        }}\n        hoverTarget=\"cell\"\n        cellOpacity={1}\n        cellBorderWidth={1}\n        cellBorderColor=\"var(--border)\"\n        labelTextColor=\"var(--background)\"\n        tooltip={({ xKey, yKey, value }) => (\n          <div className=\"p-2\">\n            <strong>{yKey}</strong> at <strong>{xKey}</strong>: {Math.round(value * 100)}% utilized\n          </div>\n        )}\n      />\n    </div>\n  );\n}\n```",
        "testStrategy": "1. Test the dashboard in all theme modes\n2. Verify that the calendar heatmap displays correctly\n3. Test worklist filtering and actions\n4. Validate that KPIs display correct data\n5. Test responsive layout on different screen sizes\n6. Ensure AI Suggestions display correctly",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Referral Wizard and Slot Picker",
        "description": "Implement the multi-step Referral Wizard and Slot Picker components for the referral creation flow.",
        "details": "1. Create a multi-step wizard with the following steps:\n   - Patient information\n   - Exam details (modality, body part)\n   - Clinical notes\n   - Attachments (simulated)\n   - Center selection\n   - Review and submit\n\n2. Implement the Slot Picker component with:\n   - Calendar view of available slots\n   - Safety questions that must be completed\n   - Slot selection and booking functionality\n\n3. Add validation for each step\n4. Implement AI center recommendation in the right rail\n\nExample Wizard Component:\n```tsx\n// src/components/ReferralWizard.tsx\nimport { useState } from 'react';\nimport { Button } from './ui/button';\nimport { PatientStep } from './wizard/PatientStep';\nimport { ExamStep } from './wizard/ExamStep';\nimport { ClinicalNotesStep } from './wizard/ClinicalNotesStep';\nimport { AttachmentsStep } from './wizard/AttachmentsStep';\nimport { CenterStep } from './wizard/CenterStep';\nimport { ReviewStep } from './wizard/ReviewStep';\nimport { AIRecommendation } from './AIRecommendation';\n\nconst steps = [\n  'Patient',\n  'Exam',\n  'Clinical Notes',\n  'Attachments',\n  'Center',\n  'Review'\n];\n\nexport function ReferralWizard() {\n  const [currentStep, setCurrentStep] = useState(0);\n  const [formData, setFormData] = useState({\n    patient: {},\n    exam: {},\n    clinicalNotes: '',\n    attachments: [],\n    center: null,\n    safetyAnswers: {}\n  });\n  \n  const updateFormData = (field, value) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n  };\n  \n  const nextStep = () => setCurrentStep(prev => Math.min(prev + 1, steps.length - 1));\n  const prevStep = () => setCurrentStep(prev => Math.max(prev - 1, 0));\n  \n  const renderStep = () => {\n    switch (currentStep) {\n      case 0:\n        return <PatientStep data={formData.patient} updateData={(value) => updateFormData('patient', value)} />;\n      case 1:\n        return <ExamStep data={formData.exam} updateData={(value) => updateFormData('exam', value)} />;\n      case 2:\n        return <ClinicalNotesStep data={formData.clinicalNotes} updateData={(value) => updateFormData('clinicalNotes', value)} />;\n      case 3:\n        return <AttachmentsStep data={formData.attachments} updateData={(value) => updateFormData('attachments', value)} />;\n      case 4:\n        return <CenterStep data={formData.center} safetyAnswers={formData.safetyAnswers} updateData={(value) => updateFormData('center', value)} updateSafetyAnswers={(value) => updateFormData('safetyAnswers', value)} />;\n      case 5:\n        return <ReviewStep formData={formData} />;\n      default:\n        return null;\n    }\n  };\n  \n  return (\n    <div className=\"grid grid-cols-12 gap-6\">\n      <div className=\"col-span-12 mb-6\">\n        <div className=\"flex justify-between items-center\">\n          {steps.map((step, index) => (\n            <div key={step} className=\"flex items-center\">\n              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${index === currentStep ? 'bg-primary text-primary-foreground' : index < currentStep ? 'bg-primary/20' : 'bg-muted'}`}>\n                {index + 1}\n              </div>\n              {index < steps.length - 1 && (\n                <div className={`h-1 w-full ${index < currentStep ? 'bg-primary/20' : 'bg-muted'}`} />\n              )}\n              <span className=\"ml-2\">{step}</span>\n            </div>\n          ))}\n        </div>\n      </div>\n      \n      <div className=\"col-span-12 lg:col-span-8\">\n        {renderStep()}\n      </div>\n      \n      <div className=\"col-span-12 lg:col-span-4\">\n        <AIRecommendation formData={formData} currentStep={currentStep} />\n      </div>\n      \n      <div className=\"col-span-12 flex justify-between mt-6\">\n        <Button variant=\"outline\" onClick={prevStep} disabled={currentStep === 0}>\n          Previous\n        </Button>\n        {currentStep < steps.length - 1 ? (\n          <Button onClick={nextStep}>Next</Button>\n        ) : (\n          <Button onClick={() => console.log('Submit', formData)}>Submit Referral</Button>\n        )}\n      </div>\n    </div>\n  );\n}\n```",
        "testStrategy": "1. Test each step of the wizard for validation\n2. Verify that the slot picker correctly displays available slots\n3. Test safety questions validation\n4. Ensure the AI recommendation component displays correctly\n5. Validate form submission and error handling\n6. Test the entire flow end-to-end",
        "priority": "high",
        "dependencies": [
          3,
          4
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Attorney and Funder Dashboards",
        "description": "Implement the Attorney and Funder role-specific dashboards with case management, packet preview, and funding approval functionality.",
        "details": "1. Create Attorney Dashboard with:\n   - KPI cards for active clients, attendance %, pending packets, lien exposure\n   - Case table with status and next action\n   - Packet preview component\n   - AI Suggestions for client management\n\n2. Create Funder Dashboard with:\n   - KPI cards for exposure, approvals pending, avg decision time, expected ROI\n   - Area chart for exposure over time\n   - Case table with approval status\n   - AI Suggestions for case approvals\n\n3. Implement the Case Packet preview component\n4. Create the Lien Ledger component with interest calculation\n\nExample Attorney Dashboard:\n```tsx\n// src/pages/AttorneyDashboard.tsx\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { AITip } from '@/components/AITip';\nimport { PacketPreview } from '@/components/PacketPreview';\nimport { useStore } from '@/store';\n\nexport function AttorneyDashboard() {\n  const [loading, setLoading] = useState(true);\n  const [selectedCase, setSelectedCase] = useState(null);\n  const { cases, fetchCases } = useStore();\n  \n  useEffect(() => {\n    fetchCases().finally(() => setLoading(false));\n  }, [fetchCases]);\n  \n  // Calculate KPIs\n  const activeClients = cases.length;\n  const attendanceRate = cases.reduce((acc, c) => acc + (c.attendanceRate || 0), 0) / cases.length;\n  const pendingPackets = cases.filter(c => c.packetStatus === 'pending').length;\n  const totalExposure = cases.reduce((acc, c) => acc + (c.lienAmount || 0), 0);\n  \n  return (\n    <>\n      <div className=\"col-span-12\">\n        <h1 className=\"text-3xl font-bold mb-6\">Attorney Dashboard</h1>\n      </div>\n      \n      {/* KPI Row */}\n      <div className=\"col-span-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Active Clients</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{activeClients}</div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"col-span-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Attendance %</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{Math.round(attendanceRate * 100)}%</div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"col-span-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Pending Packets</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{pendingPackets}</div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"col-span-3\">\n        <Card>\n          <CardHeader className=\"pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Lien Exposure</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">${totalExposure.toLocaleString()}</div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Case Table */}\n      <div className=\"col-span-12 lg:col-span-8\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Active Cases</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Client</TableHead>\n                  <TableHead>Status</TableHead>\n                  <TableHead>Next Action</TableHead>\n                  <TableHead>Lien Amount</TableHead>\n                  <TableHead></TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {loading ? (\n                  Array(5).fill(0).map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell colSpan={5}>\n                        <div className=\"h-8 animate-pulse bg-muted rounded\" />\n                      </TableCell>\n                    </TableRow>\n                  ))\n                ) : cases.map(c => (\n                  <TableRow key={c.id}>\n                    <TableCell>{c.clientName}</TableCell>\n                    <TableCell>\n                      <Badge variant={c.status === 'active' ? 'default' : c.status === 'pending' ? 'secondary' : 'outline'}>\n                        {c.status}\n                      </Badge>\n                    </TableCell>\n                    <TableCell>{c.nextAction}</TableCell>\n                    <TableCell>${c.lienAmount?.toLocaleString()}</TableCell>\n                    <TableCell>\n                      <Button size=\"sm\" onClick={() => setSelectedCase(c)}>View</Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* AI Tips and Packet Preview */}\n      <div className=\"col-span-12 lg:col-span-4\">\n        <AITip tip=\"Two clients are at risk of no-show this week. Consider sending reminders to John Doe and Jane Smith.\" />\n        \n        {selectedCase && (\n          <Card className=\"mt-6\">\n            <CardHeader>\n              <CardTitle>Case Packet Preview</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <PacketPreview caseId={selectedCase.id} />\n              <Button className=\"w-full mt-4\">Generate Full Packet</Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </>\n  );\n}\n```",
        "testStrategy": "1. Test both dashboards in all theme modes\n2. Verify that KPIs display correct data\n3. Test the Case Packet preview functionality\n4. Validate the Lien Ledger calculations\n5. Test responsive layout on different screen sizes\n6. Ensure AI Suggestions display correctly",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Ops Dashboard and Center Scorecards",
        "description": "Implement the Ops Dashboard with queues, center scorecards, and reassignment functionality.",
        "details": "1. Create Ops Dashboard with:\n   - Queue cards for Missing docs, No-shows, Aged referrals\n   - Center SLA scorecards with badges\n   - AI Suggestions for optimization\n\n2. Implement queue filtering and bulk actions\n3. Create the center reassignment flow\n4. Add audit logging for actions\n\nExample Ops Dashboard:\n```tsx\n// src/pages/OpsDashboard.tsx\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport { AITip } from '@/components/AITip';\nimport { CenterScorecard } from '@/components/CenterScorecard';\nimport { useStore } from '@/store';\n\nexport function OpsDashboard() {\n  const [loading, setLoading] = useState(true);\n  const { queues, centers, fetchQueues, fetchCenters } = useStore();\n  \n  useEffect(() => {\n    Promise.all([\n      fetchQueues(),\n      fetchCenters()\n    ]).finally(() => setLoading(false));\n  }, [fetchQueues, fetchCenters]);\n  \n  return (\n    <>\n      <div className=\"col-span-12\">\n        <h1 className=\"text-3xl font-bold mb-6\">Operations Dashboard</h1>\n      </div>\n      \n      {/* Queues */}\n      <div className=\"col-span-12\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Action Queues</CardTitle>\n            <CardDescription>Items requiring attention</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"missing-docs\">\n              <TabsList className=\"mb-4\">\n                <TabsTrigger value=\"missing-docs\">\n                  Missing Docs\n                  <Badge className=\"ml-2\" variant=\"secondary\">{queues.missingDocs?.length || 0}</Badge>\n                </TabsTrigger>\n                <TabsTrigger value=\"no-shows\">\n                  No-Shows\n                  <Badge className=\"ml-2\" variant=\"secondary\">{queues.noShows?.length || 0}</Badge>\n                </TabsTrigger>\n                <TabsTrigger value=\"aged-referrals\">\n                  Aged Referrals\n                  <Badge className=\"ml-2\" variant=\"secondary\">{queues.agedReferrals?.length || 0}</Badge>\n                </TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"missing-docs\">\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>Patient</TableHead>\n                      <TableHead>Referrer</TableHead>\n                      <TableHead>Missing Document</TableHead>\n                      <TableHead>Age (days)</TableHead>\n                      <TableHead></TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {loading ? (\n                      Array(5).fill(0).map((_, i) => (\n                        <TableRow key={i}>\n                          <TableCell colSpan={5}>\n                            <div className=\"h-8 animate-pulse bg-muted rounded\" />\n                          </TableCell>\n                        </TableRow>\n                      ))\n                    ) : queues.missingDocs?.map(item => (\n                      <TableRow key={item.id}>\n                        <TableCell>{item.patientName}</TableCell>\n                        <TableCell>{item.referrerName}</TableCell>\n                        <TableCell>{item.missingDoc}</TableCell>\n                        <TableCell>{item.ageDays}</TableCell>\n                        <TableCell>\n                          <Button size=\"sm\">Request</Button>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TabsContent>\n              \n              {/* Similar tables for other tabs */}\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n      \n      {/* Center Scorecards */}\n      <div className=\"col-span-12 mt-6\">\n        <h2 className=\"text-2xl font-bold mb-4\">Center Scorecards</h2>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {loading ? (\n            Array(3).fill(0).map((_, i) => (\n              <div key={i} className=\"h-64 animate-pulse bg-muted rounded\" />\n            ))\n          ) : centers.map(center => (\n            <CenterScorecard key={center.id} center={center} />\n          ))}\n        </div>\n      </div>\n      \n      {/* AI Suggestions */}\n      <div className=\"col-span-12 mt-6\">\n        <AITip tip=\"Consider reassigning John Doe's MRI to Center B which has availability tomorrow. Center A is currently booking 7+ days out.\" />\n      </div>\n    </>\n  );\n}\n```",
        "testStrategy": "1. Test the dashboard in all theme modes\n2. Verify that queues display correct data and filter properly\n3. Test the center reassignment flow\n4. Validate that scorecards display correct metrics\n5. Test responsive layout on different screen sizes\n6. Ensure AI Suggestions display correctly\n7. Verify audit logging for actions",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Admin Dashboard and Master Data",
        "description": "Implement the Admin Dashboard with theme management and master data display.",
        "details": "1. Create Admin Dashboard with:\n   - Theme Manager component\n   - Users/Roles static list\n\n2. Implement the Theme Manager with preset selection\n3. Create read-only views of master data entities\n\nExample Theme Manager:\n```tsx\n// src/components/ThemeManager.tsx\nimport { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { Switch } from '@/components/ui/switch';\nimport { useTheme } from '@/hooks/useTheme';\n\nconst presets = [\n  { id: 'light', name: 'Light' },\n  { id: 'dark', name: 'Dark' },\n  { id: 'neon', name: 'MRI Neon' }\n];\n\nexport function ThemeManager() {\n  const { theme, setTheme, isDark, setIsDark } = useTheme();\n  \n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Theme Manager</CardTitle>\n        <CardDescription>Customize the appearance of the platform</CardDescription>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          <div>\n            <h3 className=\"text-lg font-medium mb-2\">Color Preset</h3>\n            <RadioGroup value={theme} onValueChange={setTheme}>\n              {presets.map(preset => (\n                <div key={preset.id} className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value={preset.id} id={`preset-${preset.id}`} />\n                  <Label htmlFor={`preset-${preset.id}`}>{preset.name}</Label>\n                </div>\n              ))}\n            </RadioGroup>\n          </div>\n          \n          <div className=\"flex items-center space-x-2\">\n            <Switch id=\"dark-mode\" checked={isDark} onCheckedChange={setIsDark} />\n            <Label htmlFor=\"dark-mode\">Dark Mode</Label>\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-4 mt-6\">\n            <div className=\"p-4 rounded bg-background border border-border\">\n              <span className=\"text-foreground\">Background</span>\n            </div>\n            <div className=\"p-4 rounded bg-primary text-primary-foreground\">\n              <span>Primary</span>\n            </div>\n            <div className=\"p-4 rounded bg-secondary text-secondary-foreground\">\n              <span>Secondary</span>\n            </div>\n            <div className=\"p-4 rounded bg-muted text-muted-foreground\">\n              <span>Muted</span>\n            </div>\n            <div className=\"p-4 rounded bg-accent text-accent-foreground\">\n              <span>Accent</span>\n            </div>\n            <div className=\"p-4 rounded bg-destructive text-destructive-foreground\">\n              <span>Destructive</span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n```",
        "testStrategy": "1. Test the Theme Manager in all theme modes\n2. Verify that theme presets apply correctly\n3. Test dark mode toggle\n4. Validate that master data displays correctly\n5. Test responsive layout on different screen sizes",
        "priority": "low",
        "dependencies": [
          1,
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "AI Insight Drawer Implementation",
        "description": "Implement the AI Insight Drawer component with context-aware suggestions based on heuristics over seed data.",
        "details": "1. Create the AI Insight Drawer component that can be toggled open/closed\n2. Implement heuristic functions to generate suggestions based on the current page and user role\n3. Create an MSW handler for `/ai/suggest` to simulate AI responses\n4. Add different suggestion styles (clinical, friendly, concise)\n\nExample AI Insight Drawer:\n```tsx\n// src/components/AIDrawer.tsx\nimport { useEffect, useState } from 'react';\nimport { X } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { Skeleton } from './ui/skeleton';\nimport { useLocation } from 'react-router-dom';\nimport { useStore } from '@/store';\n\nexport function AIDrawer({ onClose }) {\n  const [loading, setLoading] = useState(true);\n  const [suggestions, setSuggestions] = useState([]);\n  const location = useLocation();\n  const { currentUser } = useStore();\n  \n  useEffect(() => {\n    // Fetch AI suggestions based on current page and role\n    fetch(`/api/ai/suggest?path=${location.pathname}&role=${currentUser.role}`)\n      .then(res => res.json())\n      .then(data => {\n        setSuggestions(data.suggestions);\n        setLoading(false);\n      });\n  }, [location.pathname, currentUser.role]);\n  \n  return (\n    <div className=\"w-80 border-l border-border bg-background p-4 flex flex-col h-full\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-lg font-bold\">AI Insights</h2>\n        <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n          <X className=\"h-4 w-4\" />\n        </Button>\n      </div>\n      \n      <div className=\"flex-1 overflow-y-auto space-y-4\">\n        {loading ? (\n          Array(3).fill(0).map((_, i) => (\n            <div key={i} className=\"p-4 border border-border rounded-lg\">\n              <Skeleton className=\"h-4 w-3/4 mb-2\" />\n              <Skeleton className=\"h-4 w-full mb-2\" />\n              <Skeleton className=\"h-4 w-5/6\" />\n            </div>\n          ))\n        ) : suggestions.map((suggestion, i) => (\n          <div key={i} className=\"p-4 border border-border rounded-lg\">\n            <h3 className=\"font-medium mb-1\">{suggestion.title}</h3>\n            <p className=\"text-sm text-muted-foreground\">{suggestion.description}</p>\n            {suggestion.action && (\n              <Button variant=\"link\" className=\"p-0 h-auto mt-2 text-sm\">\n                {suggestion.action}\n              </Button>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n```\n\nExample MSW handler:\n```tsx\n// src/mocks/handlers.ts (addition)\nrest.get('/api/ai/suggest', (req, res, ctx) => {\n  const path = req.url.searchParams.get('path');\n  const role = req.url.searchParams.get('role');\n  \n  // Generate suggestions based on path and role\n  let suggestions = [];\n  \n  if (path.includes('/referrer') && role === 'referrer') {\n    suggestions = [\n      {\n        title: 'Center Recommendation',\n        description: 'Based on recent turnaround times, Center A is currently processing MRIs 2 days faster than average.',\n        action: 'View Center Details'\n      },\n      {\n        title: 'Patient Follow-up',\n        description: 'Three patients have completed scans in the last week with reports now available.',\n        action: 'View Reports'\n      }\n    ];\n  } else if (path.includes('/attorney') && role === 'attorney') {\n    suggestions = [\n      {\n        title: 'No-show Risk',\n        description: 'Two clients are at risk of no-show this week. Consider sending reminders to John Doe and Jane Smith.',\n        action: 'Send Reminders'\n      },\n      {\n        title: 'Missing Documentation',\n        description: 'Case #12345 is missing insurance verification which may delay processing.',\n        action: 'Request Document'\n      }\n    ];\n  }\n  // Add more conditions for other paths/roles\n  \n  return res(\n    ctx.delay(300 + Math.random() * 400),\n    ctx.status(200),\n    ctx.json({ suggestions })\n  );\n});\n```",
        "testStrategy": "1. Test the AI Drawer in all theme modes\n2. Verify that suggestions change based on current page and role\n3. Test loading states and error handling\n4. Validate that the drawer can be toggled open/closed\n5. Test responsive layout on different screen sizes",
        "priority": "medium",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 11,
        "title": "Case Packet and Lien Ledger Components",
        "description": "Implement the Case Packet preview and Lien Ledger components for the Attorney workspace.",
        "details": "1. Create the Case Packet preview component that compiles:\n   - Records\n   - Bills\n   - Images placeholder\n   - Radiology report\n\n2. Implement the Lien Ledger component with:\n   - Interest calculation\n   - Adjustments\n   - Settlement disbursement splits\n\n3. Add PDF export functionality (simulated)\n\nExample Case Packet Preview:\n```tsx\n// src/components/PacketPreview.tsx\nimport { useEffect, useState } from 'react';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Button } from '@/components/ui/button';\nimport { FileText, Image, DollarSign, FileCheck } from 'lucide-react';\nimport { useStore } from '@/store';\n\ninterface PacketPreviewProps {\n  caseId: string;\n}\n\nexport function PacketPreview({ caseId }: PacketPreviewProps) {\n  const [loading, setLoading] = useState(true);\n  const [packetData, setPacketData] = useState(null);\n  const { fetchCasePacket } = useStore();\n  \n  useEffect(() => {\n    fetchCasePacket(caseId)\n      .then(data => {\n        setPacketData(data);\n        setLoading(false);\n      });\n  }, [caseId, fetchCasePacket]);\n  \n  if (loading) {\n    return (\n      <div className=\"h-64 animate-pulse bg-muted rounded\" />\n    );\n  }\n  \n  return (\n    <div>\n      <Tabs defaultValue=\"records\">\n        <TabsList className=\"mb-4\">\n          <TabsTrigger value=\"records\">\n            <FileText className=\"h-4 w-4 mr-2\" />\n            Records\n          </TabsTrigger>\n          <TabsTrigger value=\"bills\">\n            <DollarSign className=\"h-4 w-4 mr-2\" />\n            Bills\n          </TabsTrigger>\n          <TabsTrigger value=\"images\">\n            <Image className=\"h-4 w-4 mr-2\" />\n            Images\n          </TabsTrigger>\n          <TabsTrigger value=\"report\">\n            <FileCheck className=\"h-4 w-4 mr-2\" />\n            Report\n          </TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value=\"records\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2\">\n                {packetData.records.map(record => (\n                  <div key={record.id} className=\"flex justify-between items-center p-2 border-b border-border\">\n                    <div>\n                      <div className=\"font-medium\">{record.title}</div>\n                      <div className=\"text-sm text-muted-foreground\">{record.date}</div>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\">View</Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        <TabsContent value=\"bills\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"space-y-2\">\n                {packetData.bills.map(bill => (\n                  <div key={bill.id} className=\"flex justify-between items-center p-2 border-b border-border\">\n                    <div>\n                      <div className=\"font-medium\">{bill.provider}</div>\n                      <div className=\"text-sm text-muted-foreground\">${bill.amount.toLocaleString()} - {bill.date}</div>\n                    </div>\n                    <Button variant=\"ghost\" size=\"sm\">View</Button>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n        \n        {/* Similar content for other tabs */}\n      </Tabs>\n    </div>\n  );\n}\n```\n\nExample Lien Ledger:\n```tsx\n// src/components/LienLedger.tsx\nimport { useState } from 'react';\nimport { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from '@/components/ui/table';\nimport { Input } from '@/components/ui/input';\nimport { Button } from '@/components/ui/button';\nimport { Plus } from 'lucide-react';\n\ninterface LienLedgerProps {\n  lien: {\n    id: string;\n    principal: number;\n    rateApr: number;\n    accrualBasis: string;\n    ledger: Array<{\n      date: string;\n      description: string;\n      amount: number;\n      balance: number;\n    }>;\n  };\n  onUpdate: (ledger: any) => void;\n}\n\nexport function LienLedger({ lien, onUpdate }: LienLedgerProps) {\n  const [newEntry, setNewEntry] = useState({\n    date: new Date().toISOString().split('T')[0],\n    description: '',\n    amount: 0\n  });\n  \n  const calculateInterest = (principal, rateApr, days) => {\n    const dailyRate = rateApr / 365;\n    return principal * dailyRate * days / 100;\n  };\n  \n  const addEntry = () => {\n    const lastEntry = lien.ledger[lien.ledger.length - 1];\n    const newBalance = lastEntry.balance + newEntry.amount;\n    \n    const updatedLedger = [\n      ...lien.ledger,\n      {\n        ...newEntry,\n        balance: newBalance\n      }\n    ];\n    \n    onUpdate({\n      ...lien,\n      ledger: updatedLedger\n    });\n    \n    setNewEntry({\n      date: new Date().toISOString().split('T')[0],\n      description: '',\n      amount: 0\n    });\n  };\n  \n  return (\n    <div>\n      <div className=\"mb-4\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <p className=\"text-sm font-medium mb-1\">Principal</p>\n            <p className=\"text-lg font-bold\">${lien.principal.toLocaleString()}</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium mb-1\">Rate (APR)</p>\n            <p className=\"text-lg font-bold\">{lien.rateApr}%</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium mb-1\">Accrual Basis</p>\n            <p className=\"text-lg font-bold\">{lien.accrualBasis}</p>\n          </div>\n          <div>\n            <p className=\"text-sm font-medium mb-1\">Current Balance</p>\n            <p className=\"text-lg font-bold\">\n              ${lien.ledger[lien.ledger.length - 1].balance.toLocaleString()}\n            </p>\n          </div>\n        </div>\n      </div>\n      \n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Date</TableHead>\n            <TableHead>Description</TableHead>\n            <TableHead>Amount</TableHead>\n            <TableHead>Balance</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {lien.ledger.map((entry, i) => (\n            <TableRow key={i}>\n              <TableCell>{entry.date}</TableCell>\n              <TableCell>{entry.description}</TableCell>\n              <TableCell>${entry.amount.toLocaleString()}</TableCell>\n              <TableCell>${entry.balance.toLocaleString()}</TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n      \n      <div className=\"mt-4 grid grid-cols-12 gap-4 items-end\">\n        <div className=\"col-span-3\">\n          <label className=\"text-sm font-medium mb-1 block\">Date</label>\n          <Input\n            type=\"date\"\n            value={newEntry.date}\n            onChange={e => setNewEntry({ ...newEntry, date: e.target.value })}\n          />\n        </div>\n        <div className=\"col-span-5\">\n          <label className=\"text-sm font-medium mb-1 block\">Description</label>\n          <Input\n            value={newEntry.description}\n            onChange={e => setNewEntry({ ...newEntry, description: e.target.value })}\n            placeholder=\"Interest accrual, adjustment, etc.\"\n          />\n        </div>\n        <div className=\"col-span-3\">\n          <label className=\"text-sm font-medium mb-1 block\">Amount</label>\n          <Input\n            type=\"number\"\n            value={newEntry.amount}\n            onChange={e => setNewEntry({ ...newEntry, amount: parseFloat(e.target.value) || 0 })}\n          />\n        </div>\n        <div className=\"col-span-1\">\n          <Button onClick={addEntry}>\n            <Plus className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n```",
        "testStrategy": "1. Test the Case Packet preview in all theme modes\n2. Verify that packet documents display correctly\n3. Test the Lien Ledger calculations\n4. Validate that new entries can be added to the ledger\n5. Test PDF export functionality\n6. Test responsive layout on different screen sizes",
        "priority": "medium",
        "dependencies": [
          3,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 12,
        "title": "Charts and Data Visualization",
        "description": "Implement responsive charts using Nivo with theme-aware styling for various dashboards.",
        "details": "1. Create the following chart components:\n   - Center Utilization (calendar heatmap)\n   - Turnaround Time (line chart by center)\n   - No-Show Rate (stacked bar chart by cause)\n   - Funding Exposure (area chart over time)\n\n2. Implement theme-aware styling using CSS variables\n3. Ensure charts are responsive and accessible\n\nExample Chart Implementation:\n```tsx\n// src/components/charts/TurnaroundTimeChart.tsx\nimport { ResponsiveLine } from '@nivo/line';\nimport { useTheme } from '@/hooks/useTheme';\n\ninterface TurnaroundTimeChartProps {\n  data: Array<{\n    id: string;\n    data: Array<{\n      x: string; // date\n      y: number; // days\n    }>;\n  }>;\n}\n\nexport function TurnaroundTimeChart({ data }: TurnaroundTimeChartProps) {\n  const { isDark } = useTheme();\n  \n  return (\n    <div className=\"h-80\">\n      <ResponsiveLine\n        data={data}\n        margin={{ top: 20, right: 110, bottom: 50, left: 60 }}\n        xScale={{ type: 'point' }}\n        yScale={{ \n          type: 'linear', \n          min: 'auto', \n          max: 'auto', \n          stacked: false, \n          reverse: false \n        }}\n        axisTop={null}\n        axisRight={null}\n        axisBottom={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'Date',\n          legendOffset: 36,\n          legendPosition: 'middle'\n        }}\n        axisLeft={{\n          tickSize: 5,\n          tickPadding: 5,\n          tickRotation: 0,\n          legend: 'Turnaround Time (days)',\n          legendOffset: -40,\n          legendPosition: 'middle'\n        }}\n        colors={[\n          'var(--chart-1)',\n          'var(--chart-2)',\n          'var(--chart-3)',\n          'var(--chart-4)',\n          'var(--chart-5)'\n        ]}\n        pointSize={10}\n        pointColor={{ theme: 'background' }}\n        pointBorderWidth={2}\n        pointBorderColor={{ from: 'serieColor' }}\n        pointLabelYOffset={-12}\n        useMesh={true}\n        legends={[{\n          anchor: 'bottom-right',\n          direction: 'column',\n          justify: false,\n          translateX: 100,\n          translateY: 0,\n          itemsSpacing: 0,\n          itemDirection: 'left-to-right',\n          itemWidth: 80,\n          itemHeight: 20,\n          itemOpacity: 0.75,\n          symbolSize: 12,\n          symbolShape: 'circle',\n          symbolBorderColor: 'rgba(0, 0, 0, .5)',\n          effects: [{\n            on: 'hover',\n            style: {\n              itemBackground: 'rgba(0, 0, 0, .03)',\n              itemOpacity: 1\n            }\n          }]\n        }]}\n        theme={{\n          textColor: 'var(--foreground)',\n          fontSize: 11,\n          axis: {\n            domain: {\n              line: {\n                stroke: 'var(--border)',\n                strokeWidth: 1\n              }\n            },\n            ticks: {\n              line: {\n                stroke: 'var(--border)',\n                strokeWidth: 1\n              }\n            }\n          },\n          grid: {\n            line: {\n              stroke: isDark ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)',\n              strokeWidth: 1\n            }\n          },\n          tooltip: {\n            container: {\n              background: 'var(--background)',\n              color: 'var(--foreground)',\n              fontSize: 12,\n              borderRadius: 'var(--radius)',\n              boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)'\n            }\n          }\n        }}\n      />\n    </div>\n  );\n}\n```",
        "testStrategy": "1. Test all charts in both light and dark modes\n2. Verify that charts use the correct CSS variables for colors\n3. Test responsive behavior on different screen sizes\n4. Validate that tooltips display correctly\n5. Test accessibility features (keyboard navigation, screen reader support)\n6. Verify that charts update correctly when data changes",
        "priority": "medium",
        "dependencies": [
          1,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 13,
        "title": "Command-K Modal and Global Search",
        "description": "Implement the Command-K modal for quick actions and global search functionality.",
        "details": "1. Create a Command-K modal component that opens with the keyboard shortcut\n2. Implement global search functionality across entities\n3. Add quick action shortcuts for common tasks\n4. Ensure keyboard navigation works correctly\n\nExample Command-K Modal:\n```tsx\n// src/components/CommandK.tsx\nimport { useEffect, useState } from 'react';\nimport { Command } from 'cmdk';\nimport { Dialog, DialogContent } from './ui/dialog';\nimport { Search, Calendar, User, FileText, Settings, ChevronRight } from 'lucide-react';\nimport { useNavigate } from 'react-router-dom';\nimport { useStore } from '@/store';\n\nexport function CommandK() {\n  const [open, setOpen] = useState(false);\n  const navigate = useNavigate();\n  const { searchEntities } = useStore();\n  const [results, setResults] = useState([]);\n  const [query, setQuery] = useState('');\n  \n  useEffect(() => {\n    const down = (e) => {\n      if (e.key === 'k' && (e.metaKey || e.ctrlKey)) {\n        e.preventDefault();\n        setOpen(open => !open);\n      }\n    };\n    \n    document.addEventListener('keydown', down);\n    return () => document.removeEventListener('keydown', down);\n  }, []);\n  \n  useEffect(() => {\n    if (query.length > 1) {\n      searchEntities(query).then(setResults);\n    } else {\n      setResults([]);\n    }\n  }, [query, searchEntities]);\n  \n  const onSelect = (value) => {\n    setOpen(false);\n    \n    if (value.startsWith('/')) {\n      navigate(value);\n    } else if (value.startsWith('action:')) {\n      // Handle actions\n      const action = value.replace('action:', '');\n      if (action === 'new-referral') {\n        navigate('/referrer/new-referral');\n      } else if (action === 'theme') {\n        navigate('/admin/theme');\n      }\n    } else {\n      // Handle entity selection\n      const [type, id] = value.split(':');\n      if (type === 'patient') {\n        navigate(`/patients/${id}`);\n      } else if (type === 'referral') {\n        navigate(`/referrals/${id}`);\n      }\n    }\n  };\n  \n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogContent className=\"p-0 gap-0 max-w-2xl\">\n        <Command className=\"rounded-lg border shadow-md\">\n          <div className=\"flex items-center border-b px-3\">\n            <Search className=\"h-4 w-4 mr-2 text-muted-foreground\" />\n            <Command.Input \n              autoFocus \n              placeholder=\"Search or type a command...\"\n              className=\"flex-1 outline-none py-3\"\n              value={query}\n              onValueChange={setQuery}\n            />\n          </div>\n          <Command.List className=\"max-h-96 overflow-y-auto p-2\">\n            {query === '' ? (\n              <>\n                <Command.Group heading=\"Navigation\">\n                  <Command.Item onSelect={() => onSelect('/dashboard')}>\n                    <div className=\"flex items-center\">\n                      <Calendar className=\"h-4 w-4 mr-2\" />\n                      <span>Dashboard</span>\n                    </div>\n                    <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n                  </Command.Item>\n                  <Command.Item onSelect={() => onSelect('/referrals')}>\n                    <div className=\"flex items-center\">\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      <span>Referrals</span>\n                    </div>\n                    <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n                  </Command.Item>\n                  <Command.Item onSelect={() => onSelect('/admin/theme')}>\n                    <div className=\"flex items-center\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      <span>Theme Settings</span>\n                    </div>\n                    <ChevronRight className=\"h-4 w-4 text-muted-foreground\" />\n                  </Command.Item>\n                </Command.Group>\n                \n                <Command.Group heading=\"Actions\">\n                  <Command.Item onSelect={() => onSelect('action:new-referral')}>\n                    <div className=\"flex items-center\">\n                      <FileText className=\"h-4 w-4 mr-2\" />\n                      <span>New Referral</span>\n                    </div>\n                  </Command.Item>\n                </Command.Group>\n              </>\n            ) : results.length > 0 ? (\n              <Command.Group heading=\"Results\">\n                {results.map(result => (\n                  <Command.Item\n                    key={`${result.type}:${result.id}`}\n                    onSelect={() => onSelect(`${result.type}:${result.id}`)}\n                  >\n                    <div className=\"flex items-center\">\n                      {result.type === 'patient' && <User className=\"h-4 w-4 mr-2\" />}\n                      {result.type === 'referral' && <FileText className=\"h-4 w-4 mr-2\" />}\n                      <span>{result.title}</span>\n                    </div>\n                    <span className=\"text-sm text-muted-foreground\">{result.subtitle}</span>\n                  </Command.Item>\n                ))}\n              </Command.Group>\n            ) : (\n              <Command.Empty>No results found.</Command.Empty>\n            )}\n          </Command.List>\n        </Command>\n      </DialogContent>\n    </Dialog>\n  );\n}\n```",
        "testStrategy": "1. Test that Command-K shortcut opens the modal\n2. Verify that search returns appropriate results\n3. Test keyboard navigation within the modal\n4. Validate that selecting items navigates to the correct page\n5. Test in all theme modes\n6. Ensure accessibility for keyboard-only users",
        "priority": "low",
        "dependencies": [
          2,
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 14,
        "title": "Animations and Micro-interactions",
        "description": "Implement Framer Motion animations for page transitions, list item hover/press states, and modal entrances.",
        "details": "1. Add Framer Motion to the project\n2. Implement page transitions (≤200ms)\n3. Add hover/press animations for list items\n4. Create entrance animations for modals and drawers\n5. Respect `prefers-reduced-motion` preference\n\nExample Page Transition:\n```tsx\n// src/components/PageTransition.tsx\nimport { motion } from 'framer-motion';\nimport { useReducedMotion } from '@/hooks/useReducedMotion';\n\ninterface PageTransitionProps {\n  children: React.ReactNode;\n}\n\nexport function PageTransition({ children }: PageTransitionProps) {\n  const prefersReducedMotion = useReducedMotion();\n  \n  const variants = {\n    initial: { opacity: 0, y: prefersReducedMotion ? 0 : 10 },\n    animate: { opacity: 1, y: 0 },\n    exit: { opacity: 0, y: prefersReducedMotion ? 0 : -10 }\n  };\n  \n  return (\n    <motion.div\n      variants={variants}\n      initial=\"initial\"\n      animate=\"animate\"\n      exit=\"exit\"\n      transition={{ duration: prefersReducedMotion ? 0 : 0.2 }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n```\n\nExample List Item Animation:\n```tsx\n// src/components/AnimatedListItem.tsx\nimport { motion } from 'framer-motion';\nimport { useReducedMotion } from '@/hooks/useReducedMotion';\n\ninterface AnimatedListItemProps {\n  children: React.ReactNode;\n  index: number;\n}\n\nexport function AnimatedListItem({ children, index }: AnimatedListItemProps) {\n  const prefersReducedMotion = useReducedMotion();\n  \n  const variants = {\n    initial: { opacity: 0, y: prefersReducedMotion ? 0 : 20 },\n    animate: { opacity: 1, y: 0 },\n    hover: { scale: prefersReducedMotion ? 1 : 1.02 }\n  };\n  \n  return (\n    <motion.div\n      variants={variants}\n      initial=\"initial\"\n      animate=\"animate\"\n      whileHover=\"hover\"\n      transition={{ \n        duration: prefersReducedMotion ? 0 : 0.2,\n        delay: prefersReducedMotion ? 0 : index * 0.05 \n      }}\n    >\n      {children}\n    </motion.div>\n  );\n}\n```\n\nExample Modal Animation:\n```tsx\n// src/components/ui/dialog.tsx (modified)\nimport * as React from 'react';\nimport * as DialogPrimitive from '@radix-ui/react-dialog';\nimport { X } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { useReducedMotion } from '@/hooks/useReducedMotion';\n\n// ... other Dialog components\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => {\n  const prefersReducedMotion = useReducedMotion();\n  \n  return (\n    <DialogPrimitive.Portal>\n      <DialogPrimitive.Overlay\n        className=\"fixed inset-0 z-50 bg-background/80 backdrop-blur-sm\"\n        asChild\n      >\n        <motion.div\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          exit={{ opacity: 0 }}\n          transition={{ duration: prefersReducedMotion ? 0 : 0.15 }}\n        />\n      </DialogPrimitive.Overlay>\n      <DialogPrimitive.Content\n        ref={ref}\n        className={cn(\n          \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 sm:rounded-lg\",\n          className\n        )}\n        asChild\n        {...props}\n      >\n        <motion.div\n          initial={{ opacity: 0, scale: prefersReducedMotion ? 1 : 0.95 }}\n          animate={{ opacity: 1, scale: 1 }}\n          exit={{ opacity: 0, scale: prefersReducedMotion ? 1 : 0.95 }}\n          transition={{ duration: prefersReducedMotion ? 0 : 0.2 }}\n        >\n          {children}\n          <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none\">\n            <X className=\"h-4 w-4\" />\n            <span className=\"sr-only\">Close</span>\n          </DialogPrimitive.Close>\n        </motion.div>\n      </DialogPrimitive.Content>\n    </DialogPrimitive.Portal>\n  );\n});\nDialogContent.displayName = DialogPrimitive.Content.displayName;\n\n// ... export components\n```",
        "testStrategy": "1. Test animations in all theme modes\n2. Verify that animations respect the `prefers-reduced-motion` preference\n3. Test page transitions between different routes\n4. Validate that list item animations work correctly\n5. Test modal entrance and exit animations\n6. Ensure animations don't interfere with accessibility",
        "priority": "low",
        "dependencies": [
          2,
          4,
          5,
          7,
          8
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 15,
        "title": "Accessibility and Final Polish",
        "description": "Implement accessibility improvements, add empty states, skeleton loaders, and prepare the demo script.",
        "details": "1. Perform an accessibility audit and fix issues:\n   - Ensure proper contrast ratios\n   - Add focus indicators\n   - Implement keyboard navigation\n   - Add ARIA attributes where needed\n\n2. Create empty states for all data-dependent components\n3. Add skeleton loaders for loading states\n4. Create a demo script for the three golden flows\n5. Add a README with setup instructions and Cursor.ai prompts\n6. Implement a one-click seed reset function\n\nExample Empty State:\n```tsx\n// src/components/EmptyState.tsx\nimport { FileQuestion } from 'lucide-react';\nimport { Button } from './ui/button';\n\ninterface EmptyStateProps {\n  title: string;\n  description: string;\n  icon?: React.ReactNode;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n}\n\nexport function EmptyState({ title, description, icon, action }: EmptyStateProps) {\n  return (\n    <div className=\"flex flex-col items-center justify-center p-8 text-center\">\n      <div className=\"rounded-full bg-muted p-3 mb-4\">\n        {icon || <FileQuestion className=\"h-6 w-6 text-muted-foreground\" />}\n      </div>\n      <h3 className=\"text-lg font-medium mb-1\">{title}</h3>\n      <p className=\"text-sm text-muted-foreground mb-4 max-w-md\">{description}</p>\n      {action && (\n        <Button onClick={action.onClick}>{action.label}</Button>\n      )}\n    </div>\n  );\n}\n```\n\nExample Skeleton Loader:\n```tsx\n// src/components/SkeletonCard.tsx\nimport { Card, CardContent, CardHeader } from './ui/card';\nimport { Skeleton } from './ui/skeleton';\n\nexport function SkeletonCard() {\n  return (\n    <Card>\n      <CardHeader className=\"pb-2\">\n        <Skeleton className=\"h-5 w-1/3\" />\n      </CardHeader>\n      <CardContent>\n        <Skeleton className=\"h-8 w-1/2 mb-4\" />\n        <Skeleton className=\"h-4 w-full mb-2\" />\n        <Skeleton className=\"h-4 w-4/5 mb-2\" />\n        <Skeleton className=\"h-4 w-2/3\" />\n      </CardContent>\n    </Card>\n  );\n}\n```\n\nExample README section:\n```markdown\n## MRIGuys Platform Visual Prototype\n\nThis is a visual prototype for the MRIGuys Platform, a PI-friendly diagnostic imaging marketplace and workflow platform.\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies: `pnpm install`\n3. Start the development server: `pnpm dev`\n4. Open http://localhost:5173 in your browser\n\n### Demo Scenarios\n\n1. **Referrer Flow:** Create referral → AI suggests best center → pick slot → status updates → mock report appears\n   - Navigate to Referrer Dashboard\n   - Click \"New Referral\"\n   - Fill out the form and proceed through the wizard\n   - Select a center and slot\n   - Return to dashboard to see status update\n\n2. **Center Flow:** See worklist → complete scan → upload report → KPIs/Charts update\n   - Navigate to Center Dashboard\n   - View the worklist\n   - Complete a scan\n   - Upload a report\n   - Observe KPIs and charts update\n\n3. **Attorney Flow:** Open case → AI flags missing doc → generate Case Packet → export PDF\n   - Navigate to Attorney Dashboard\n   - Select a case\n   - View AI suggestions about missing documents\n   - Generate a Case Packet\n   - Export as PDF\n\n### Reset Demo Data\n\nTo reset the demo data to its initial state, run: `pnpm demo:reset`\n\n### Cursor.ai Prompts\n\nHere are some useful Cursor.ai prompts for working with this codebase:\n\n- \"Create a new dashboard component for [role]\" - Generates a role-specific dashboard\n- \"Implement a [component] with shadcn/ui and Tailwind\" - Creates UI components\n- \"Add Framer Motion animations to [component]\" - Adds animations to components\n- \"Create a mock API handler for [endpoint]\" - Sets up MSW handlers\n```",
        "testStrategy": "1. Perform an accessibility audit using axe or similar tools\n2. Test keyboard navigation throughout the application\n3. Verify that all components have appropriate empty states\n4. Test skeleton loaders during data fetching\n5. Validate that the demo script works for all three golden flows\n6. Test the seed reset functionality\n7. Ensure the README contains all necessary information",
        "priority": "medium",
        "dependencies": [
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-08-21T09:56:18.034Z",
      "updated": "2025-08-25T06:46:05.268Z",
      "description": "Tasks for master context"
    }
  }
}